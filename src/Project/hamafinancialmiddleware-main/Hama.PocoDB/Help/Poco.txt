// RepoDbClassGenerator.cs
// نسخه نهایی و کامل: تولید POCO با Map، Primary، Foreign، Navigation کامل برای استفاده حرفه‌ای در پروژه‌های RepoDb

using System;
using System.Data;
using System.Data.SqlClient;
using System.IO;
using System.Linq;
using System.Text;
using System.Collections.Generic;

string connectionString = "Server=.;Database=HamaFinancialMiddleware;User Id=sa;Password=sql;TrustServerCertificate=True;";
string outputDir = Path.GetFullPath(@"..\..\..\..\Hama.Core\Entities");
string targetNamespace = "Hama.Core.Entities";

if (!Directory.Exists(outputDir))
    Directory.CreateDirectory(outputDir);

using var connection = new SqlConnection(connectionString);
connection.Open();

var tables = connection.GetSchema("Tables");

// کلیدهای اصلی
var allPrimaryKeys = new Dictionary<string, HashSet<string>>();
using (var cmd = new SqlCommand(@"
    SELECT TABLE_NAME, COLUMN_NAME
    FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE
    WHERE OBJECTPROPERTY(OBJECT_ID(CONSTRAINT_SCHEMA + '.' + CONSTRAINT_NAME), 'IsPrimaryKey') = 1", connection))
using (var reader = cmd.ExecuteReader())
{
    while (reader.Read())
    {
        string table = reader.GetString(0);
        string column = reader.GetString(1);
        if (!allPrimaryKeys.ContainsKey(table))
            allPrimaryKeys[table] = new HashSet<string>();
        allPrimaryKeys[table].Add(column);
    }
}

// کلیدهای خارجی
var foreignKeys = new List<(string Table, string Column, string RefTable, string RefColumn)>();
using (var cmd = new SqlCommand(@"
    SELECT 
        fk.TABLE_NAME,
        cu.COLUMN_NAME,
        pk.TABLE_NAME AS REF_TABLE_NAME,
        pt.COLUMN_NAME AS REF_COLUMN_NAME
    FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS c
    INNER JOIN INFORMATION_SCHEMA.TABLE_CONSTRAINTS fk ON c.CONSTRAINT_NAME = fk.CONSTRAINT_NAME
    INNER JOIN INFORMATION_SCHEMA.TABLE_CONSTRAINTS pk ON c.UNIQUE_CONSTRAINT_NAME = pk.CONSTRAINT_NAME
    INNER JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE cu ON c.CONSTRAINT_NAME = cu.CONSTRAINT_NAME
    INNER JOIN (
        SELECT i1.TABLE_NAME, i2.COLUMN_NAME 
        FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS i1
        INNER JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE i2 ON i1.CONSTRAINT_NAME = i2.CONSTRAINT_NAME
        WHERE i1.CONSTRAINT_TYPE = 'PRIMARY KEY'
    ) pt ON pt.TABLE_NAME = pk.TABLE_NAME", connection))
using (var reader = cmd.ExecuteReader())
{
    while (reader.Read())
    {
        foreignKeys.Add((
            reader.GetString(0), // TABLE_NAME
            reader.GetString(1), // COLUMN_NAME
            reader.GetString(2), // REF_TABLE_NAME
            reader.GetString(3)  // REF_COLUMN_NAME
        ));
    }
}

foreach (DataRow row in tables.Rows)
{
    string tableName = row["TABLE_NAME"].ToString();
    var columns = connection.GetSchema("Columns", new[] { null, null, tableName });
    var primaryKeys = allPrimaryKeys.ContainsKey(tableName) ? allPrimaryKeys[tableName] : new HashSet<string>();
    var sb = new StringBuilder();

    sb.AppendLine("// Auto-generated by Hama.PocoDB - Do not edit manually");
    sb.AppendLine("using RepoDb.Attributes;");
    sb.AppendLine("using System;");
    sb.AppendLine("using System.Collections.Generic;");
    sb.AppendLine();
    sb.AppendLine($"namespace {targetNamespace}");
    sb.AppendLine("{");
    sb.AppendLine($"    [Map(\"{tableName}\")] ");
    sb.AppendLine($"    public class {tableName}");
    sb.AppendLine("    {");

    foreach (DataRow col in columns.Rows)
    {
        string columnName = col["COLUMN_NAME"].ToString();
        string sqlType = col["DATA_TYPE"].ToString();
        bool isNullable = col["IS_NULLABLE"].ToString() == "YES";

        string csharpType = sqlType switch
        {
            "int" => "int",
            "bigint" => "long",
            "smallint" => "short",
            "tinyint" => "byte",
            "bit" => "bool",
            "decimal" or "numeric" or "money" or "smallmoney" => "decimal",
            "float" => "double",
            "real" => "float",
            "datetime" or "smalldatetime" or "date" or "datetime2" => "DateTime",
            "char" or "nchar" or "varchar" or "nvarchar" or "text" or "ntext" => "string",
            "uniqueidentifier" => "Guid",
            _ => "string"
        };

        if (isNullable && csharpType != "string")
            csharpType += "?";

        bool isPrimaryKey = primaryKeys.Contains(columnName);

        sb.AppendLine("        /// <summary>");
        sb.AppendLine($"        /// ستون: {columnName} ({sqlType})");
        sb.AppendLine("        /// </summary>");
        if (isPrimaryKey)
            sb.AppendLine("        [Primary]");
        sb.AppendLine($"        public {csharpType} {columnName} {{ get; set; }}");
    }

    // Navigation: کلاس مربوطه (Many-to-One)
    foreach (var fk in foreignKeys.Where(f => f.Table == tableName))
    {
        sb.AppendLine();
        sb.AppendLine($"        public {fk.RefTable} {fk.RefTable} {{ get; set; }}");
    }

    // Navigation: لیست معکوس (One-to-Many)
    foreach (var fk in foreignKeys.Where(f => f.RefTable == tableName))
    {
        string inverse = fk.Table;
        sb.AppendLine();
        sb.AppendLine($"        public ICollection<{inverse}> {inverse}List {{ get; set; }}");
    }

    sb.AppendLine("    }");
    sb.AppendLine("}");

    string filePath = Path.Combine(outputDir, tableName + ".cs");
    File.WriteAllText(filePath, sb.ToString());
    Console.WriteLine($"✅ Created class for table: {tableName}");
}

Console.WriteLine("\n🎯 All POCO classes with navigation and attributes generated successfully!");