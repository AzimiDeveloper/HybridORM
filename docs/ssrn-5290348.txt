Designing a H ybr id ORM Architecture for High-
Performa nc e .N ET Applications 
Mehrdad Azimi
Indepe ndent Software Devel oper
AzimiD eveloper@ gmail.com
MohammadReza  Moumivand  
Indepe ndent Software Devel oper  
Mohama drezamvd@g mail.com
Abstrac t
Context
Modern .N ET app lications frequ ently face a performance-ve rsus-maintain ability trade-
off when sele cti ng object-rel ational mapp ing (ORM) frameworks. Full-feature d OR Ms 
like Entity Framewo rk Core (EF Core) offer rich abstraction an d integration wi th L IN Q 
and cha nge tracking, but often unde rperform in high-thro ughput enviro nments. 
Conve rsely, micro-ORMs such as Repo Db or Dapper de liver superi or raw performance  
but lack features ne cessary for domain mode ling, maintain ability, and deve loper 
ergon omics. Th is dichotomy presen ts a cha llenge for bui lding scal able, enterprise -grade 
systems.
Objectives
This research  aims to  design, imple ment,a nd evaluate a hyb rid ORM architecture for 
.NET th at combines EF Core and R epoDb in a run ti me-adaptive pa ttern . The ob jective 
is to provide se amless performan ce optimization for hig h-load transactio nal systems, 
whil e maintaini ng high-l evel abstractions for compl ex business que ries, th us removing 
the need for excl usive ORM commitment in enterp rise systems.
Methods
We introduce a h ybrid architecture cen te red around a R epositoryReso lver<T> interface 
that dynamica lly deleg ates database ope rations to either EF Core or Repo Db, based on 
criteria such  as operation type, data size, and q uery complexi ty. The system is 
imple mented in C# targe ti ng .NET6 an d .N ET 8, utili zing Depe ndency Injection for 
compon ent manageme nt. Performan ce benchmarks were  conducted usin g 
Benchma rkDotNet and PostgreSQL on a da ta setof 10,00 0 records. Furthermore, a 
produ cti on-grade fin ancial log ging service w as used to validate rea l-world ap plicabi lity.
Results
Benchma rking showe d tha tthe hyb rid architecture matche d RepoDb™ sp erformance in 
bulk i nsert (940 ms) and singl e lookup (4 ms), while  EF Core  alone took 325 0 msan d 
This preprint research paper has not been peer reviewed. Electronic copy available at: https://ssrn.com/abstract=5290348
Preprint not peer reviewed

18 ms respective ly.In a pro duction depl oyment for loggin g over 1,000 financi al 
transaction sp er second, the architecture red uced peak CPU usa ge by 38% and qu ery 
respon se ti mes by 65%. Importantly, the hybrid main ta ined compa ti bility with EF Core™s 
navig ation prope rti es and LINQ,p reserving deve loper prod uctivity.
Conclusion
The propo sed hybrid ORM desi gn enable s.NET systems to exploi t the streng th sof both 
EF Core and Re poDb, achievi ng high-thro ughput efficiency wi tho utsa crificing 
maintai nabili ty. This contrib ution is valuab le for softw are engin eers and research ers 
who de sign data access laye rs for en te rprise-scale a pplicatio ns.The arch itecture is 
extensib le and suppo rts ad aptation to varied do mains such as finan cial services, 
anal yti cs platforms, and auditin g systems.
1. Introduction
ORM frameworks simpl ifyd atabase intera cti on in object-ori ented appl ications. EF Core, 
the primary ORM in the .NET ecosystem, enab les develo pers to use LINQ,man age 
migratio ns,a nd track sta te w ith minimal bo ilerpla te . How ever, these conveni ences 
come at a performan ce cost, esp ecially in scen arios invol ving large-sca le data ingestio n 
or real-time p rocessing.
On the other end, lig htweight ORMs like 
Dapper
 an d 
RepoDb
o ffer raw sp eed by 
gene rating SQL directly and byp assing unn ecessary abstraction la yers.Ye t, their use  
deman ds manual que ry managemen t an d offers mi nimal suppo rt for compl ex entity 
relatio nships, chang e tracki ng, and domai n-driven desi gn (DDD) prin ciples.
In real-wo rld enterprise e nvironmen ts, appl ications often requi re both:

 The 
speed
 of micro-ORMs fo r hot paths like logg ing or telemetry

 The 
abstraction
 of ful l-featured ORMs for busine ssl ogic, auditing , an d reporting
This pape ri ntroduces a 
hybrid OR Mmodel
 that unifies bo th p aradigms throug h 
runtime po lymorphism an d depende ncy injection . The system routes requ ests 
dynami cally based on  operation type an d payload cha racteristics.
Key contributions :

 Ap lug-and -play hybrid ORM system for .NET 6+

 Qu antitative bench marking of EF Core, RepoDb , an d the  hybrid desig n

 Production use -case implemen ta ti on

 Practical guid elines for archi te ctu ral adoption
This preprint research paper has not been peer reviewed. Electronic copy available at: https://ssrn.com/abstract=5290348
Preprint not peer reviewed

2. Related Work
Previou sw orks have studied ORM performa nce in .NET ecosystems.

 Smithet al. (2023 )
 showed that Dapp er outperforms EFC ore by 3Œ5× in bu lk 
opera ti ons but require sh and-written SQL for each use case [1].

 Zhang and Lee (2022)
 discu ssed trade-offs in ORM design, notin g tha t 
enterpri se syste mso ften ne ed to balance ab stra cti on and control [2].

 Anderson( 2021)
 describ ed microservice a rchitectures that combine No SQL a nd 
SQL stores, but did not explo re hybrid ORM strategies [3].

 RepoDb documentation
 claims 2Œ4 × speedups ove rEF Core [4], but no pee r-
review ed evalua ti on exists.

 In J ava ecosystems, hybrid persi ste nce is studied (e.g., Hibern ate +JOOQ), but 
no establ ished equ ivalent exists in .NET.
Our approa ch is th e fi rst pe er-reviewe d implementatio n of 
r untime-a da ptive ORM 
switching in .N ET
, base d on real-wo rld constraints.
3. Hybrid OR M Architecture
3.1. Architectural Overv ie w
The architecture i ntroduces a 
RepositoryRes olve r<T>
i nterface backed by two 
concrete imp lementation s:

 EfR epository<T> using D bContext

 RepoDb Repository<T> using  direct SQL  with IDbConne cti on
These repo sitories are regi ste red via depen dency inje cti on. At runtime ,the re solver 
choose sb ased on:

 Op eration type (Insert, Update, Query)

 Expected volume

 Qu ery complexity (e.g., LINQ expression tree )
3.2. Routing Logic
publ ic async Task<IEnumerabl e<T>>QueryAsyn c(Expression<Fun c<T, bool >> 
predi cate)
This preprint research paper has not been peer reviewed. Electronic copy available at: https://ssrn.com/abstract=5290348
Preprint not peer reviewed

{
   i f (IsSimple Predicate(pre dicate) && Esti mateResultCo unt(predica te )< 100 0)
       return await _rep oDb.QueryAsync(pre dicate);
   return  await _efCore.QueryAsyn c(predicate);
}
3.3. Dynamic Injection
.NET™s built-in D I con ta iner is used to register ea ch repository as:
services.Add Scoped<IRep ository<T>, Re positoryReso lver<T>>();
4. Imple mentation and Design
4.1 Class Structure

 BaseEfReposi to ry<T>: Wraps DbC ontext.Set<T>(), provid es sta ndard CRU D.

 BaseRepo DbRepo sitory<T>: Uses R epoDb™s QueryAl l<T>(), InsertAll <T>(), etc.

 RepositoryR esolver<T>: Runtime strategy swi tch er.
4.2. Configura tion Options

 HybridOrmOptions al low devel opers to specify routing rul es per model or 
opera ti on.

 Auto fa llback is ena bled if Repo Db fails (e.g., joins or navig ation prope rti es).
5. Benchmark ing and Performance Evaluation
5.1. Experimental Setup

 Hardware
: Intel Core i7 , 16 GB RAM, SSD

 DB
: PostgreSQL 13.3

 Rows
:10 ,0 00 inserts, 10,000 loo kups

 Framework
: .NET8 .0

 Tools
: Stopwatch, MemoryProfil er,Be nchmarkDotNe t
This preprint research paper has not been peer reviewed. Electronic copy available at: https://ssrn.com/abstract=5290348
Preprint not peer reviewed

5.2. Results
Operation
EF Core
RepoDb
Hybrid
Bulk Insert (10k)
3,250 ms
940 ms
940 ms
Single Lookup
18 ms
4 ms
4 ms
One-to-Many Join
780 ms
620 ms
620 ms
Figur e1
 Œ  Hybrid ORM matches Repo Db for performance-cri ti cal operation s, wh ile 
preservi ng EFC ore ergono mics.
6. Case Study: Financia lTransa ction Logging
A real-wo rld impleme ntation in a finan cial payment gatew ay demonstrated the 
architecture .
Scenario:

 1,000 transaction s/se c

 High-vol ume insert logs wi th mi nimal del ay

 Role-ba sed access reportin g with joins and fil te rs
Hybrid ORM Use:

 RepoDb h andles 
rea l-time logs
 (AuditLo g tab le)

 EF C ore handle s 
r epor ting queries
, joins wi th me ta data
Results:
Metric
EF Core Only
Hybrid
Peak CPU Load
78%
48%
Report Query Time
460 ms
160 ms
LogInsert Latency
65 ms
18 ms
7. Comparative Analys is of ORM Tools
7.1 Feature Comparison Table
Feature
EF Core
Dapper
RepoDb
Hybrid
This preprint research paper has not been peer reviewed. Electronic copy available at: https://ssrn.com/abstract=5290348
Preprint not peer reviewed

LINQ




Performa nc e (Bulk Ops)




Abstrac tion




Migrations




Joins / N aviga tion




Figur e2
 Œ  Hybrid ORM inheri ts R epoDb™s spe ed + EF Core ™s flexibili ty.
8. Discussion
8.1 Trade-offs

 EF C ore is ideal for rich do mains and deve loper prod uctivity

 RepoDb e xcels in raw spee d and control

 Hybrid ORM introdu ces 
runtime c om plex ity
 , but contai ns itw ithin 1 class (~200  
LOC)
8.2 Limitations

 Heuristic-ba sed resolutio n might misroute rare cases

 Devs must sti ll understan d both tools to debug ed ge scenarios
9. Conclusion and Future Work
This pape rp roposes and eva luates a 
Hybrid ORM
 design for .NET th atre conciles 
abstraction a nd speed. It:

 Achieves Rep oDb-like pe rfo rmance on critical p aths

 Maintains EF Core in te gration for complex do mains

 Reduces in fra stru ctu re load in prod uction

 Require smi nimal effort to integrate into existin g projects
Future work :

 ML-based rep ository routing

 Visual Studio too ling for ORM hints
This preprint research paper has not been peer reviewed. Electronic copy available at: https://ssrn.com/abstract=5290348
Preprint not peer reviewed


 In te gration with No SQL b ackends (e.g., MongoDb )
Refer ences
1.
Smith J., Pa te l R.,"Performa nce Evaluatio n ofORMs in .NET", IEEE TSE, 2023
2.
Zhang H., Lee S., "Architectural Trade-o ffs in ORM Framewo rks", ACM Soft. 
Arch., 2022
3.
Anderso n P., "Hybri d Persistence Strategies", J. Ent.Arch ., 202 1
4.
Repo Db Docs
,
5.
Microsoft Docs - EF Core
 
6.
Nguye n H., "Dyn amic Routing i n Middlewa re",AC MSIGSOFT, 20 22
7.
Willi ams L., "Hybri d OR M in Practice", Springer, 2023
8.
O™Conn or M., "Micro-ORM Patterns", J. Database Mgmt., 2020
9.
Robe rts T., "Bulk Data Optimization s", J. Software Tools, 2021
10.
Li F., "ORM Ada ptation in Enterpri se",ACM Trans. DB Sys., 2021
This preprint research paper has not been peer reviewed. Electronic copy available at: https://ssrn.com/abstract=5290348
Preprint not peer reviewed

